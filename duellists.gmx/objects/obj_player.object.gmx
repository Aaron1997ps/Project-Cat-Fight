<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_player</parentName>
  <maskName>spr_ogcat_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Event Inherited
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables


state = 0 //0 = normal, 1 = ledge, 2 = fightstance

//temporary position saves for stuff like ledge climbing.
possave[0] = 0
possave[1] = 0 

target = noone
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera

cam = instance_create(x,y,obj_camera)
cam.following = id
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Actions + Movement
//Get the player's input
global.key_right = keyboard_check(ord("D"));
global.key_left = keyboard_check(ord("A"));
global.key_up = keyboard_check(ord("W"));
global.key_jump = keyboard_check_pressed(vk_space);
global.key_lshift = keyboard_check(vk_lshift);
global.key_lockon = keyboard_check(ord('F'));

switch (state){
case 0:
    //Sprint
    if global.key_lshift and (global.key_right or global.key_left){
        movespeed = 4.15;
    }else{
        movespeed = 1.50;
    }    
    
    //React to inputs
    if global.key_right{
        hspeed = movespeed
        animation[4] = true
    }
    else if global.key_left{
        hspeed = -movespeed
        animation[4] = false
    }else{
        if abs(hspeed) &lt; 3
            hspeed = 0
        else if (place_meeting(x,y+1,par_wall))
            hspeed -= sign(hspeed)
    }
    if (vspeed &lt; 10)
        vspeed += grav;
    
    if (place_meeting(x,y+1,par_wall)){
        vspeed = global.key_jump * -jumpspeed
    }
    
    //Horizontal Collision
    if (place_meeting(x+hspeed,y,par_wall)){
        while(!place_meeting(x+sign(hspeed),y,par_wall)){
            x += sign(hspeed);
        }
        hspeed = 0;
    }
    
    //Vertical Collision
    if (place_meeting(x,y+vspeed,par_wall)){
        while(!place_meeting(x,y+sign(vspeed),par_wall)){
            y += sign(vspeed);
        }
        vspeed = 0;
    }
    
    //Animate -----------------------
    //jumping
    if (vspeed &lt; 0){
        switch(skin){
        case 2:
            if animation[0] != spr_lagamorph_jump{
                animation_system_update(spr_lagamorph_jump,0,0.12,1)
            }break;
        case 3:
            if animation[0] != spr_ogcat_jump{
                animation_system_update(spr_ogcat_jump,0,0.12,1)
            }break;
        }
    //falling
    }else if (vspeed &gt; 0){
        switch(skin){
        case 2:
            if animation[0] != spr_lagamorph_fall{
                animation_system_update(spr_lagamorph_fall,0,0.12,1)
            }break
        case 3:
            if animation[0] != spr_ogcat_fall{
                animation_system_update(spr_ogcat_fall,0,0.12,1)
            }break
        }
    //idle
    }else if (hspeed = 0){
        switch(skin){
        case 2:
            if animation[0] != spr_lagamorph_idle{
                animation_system_update(spr_lagamorph_idle,0,0.12,3)
            }break
        case 3:
            if animation[0] != spr_ogcat_idle{
                animation_system_update(spr_ogcat_idle,0,0.12,6)
            }break
        }
    //running / walking
    }else if (hspeed != 0){
        if global.key_lshift{
            switch(skin){
            case 2:
                if animation[0] != spr_lagamorph_run{
                    animation_system_update(spr_lagamorph_run,0,0.24,12)
                }break
            case 3:
                if animation[0] != spr_ogcat_run{
                    animation_system_update(spr_ogcat_run,0,0.12,10)
                }break
            }
        }else{
            switch(skin){
            case 2:
                if animation[0] != spr_lagamorph_walk{
                    animation_system_update(spr_lagamorph_walk,0,0.24,6)
                }break
            case 3:
                if animation[0] != spr_ogcat_walk{
                    animation_system_update(spr_ogcat_walk,0,0.12,6)
                }
            }
        }
        
    }
    //ledge grab
    /*
    if check_between(vspeed,-5,10){
        var edge_detection = 10
        var ledgeanim = false
        if animation[4]{
            if collision_point(x+13,y-49,par_wall,1,0) and !collision_point(x+13,y-height-edge_detection,par_wall,1,0){
                state = 1 
                while(collision_point(x+13,y-height,par_wall,1,0))
                    y--
                while(!collision_point(x+13,y-height+1,par_wall,1,0))
                    y++
                ledgeanim = true
                hspeed = 0
                vspeed = 0
            }
        }else{
            if collision_point(x-13,y-49,par_wall,1,0) and !collision_point(x-13,y-height-edge_detection,par_wall,1,0){
                state = 1 
                while(collision_point(x-13,y-height,par_wall,1,0))
                    y--
                while(!collision_point(x-13,y-height+1,par_wall,1,0))
                    y++
                ledgeanim = true
                hspeed = 0
                vspeed = 0
            }
        }
        if ledgeanim{
            switch(skin){
            case 2:
                animation_system_update(spr_lagamorph_ledge,0,0.24,6)
                break;
            case 3:
                animation_system_update(spr_ogcat_ledge,0,0.12,6)
                break;
            }
        }
    }*/
    
    if global.key_lockon{
        x-=10000
        target = instance_nearest(x+10000,y,par_entity)
        x+=10000
        
        if target = id and check_between(target.x,view_xview[0],view_xview[0]+view_wview[0]) and check_between(target.y,view_yview[0],view_yview[0]+view_hview[0])
            target = noone
        else
            state = 2
    }
    break
case 1: //ledge garb
    hspeed = 0
    vspeed = 0
    switch(skin){
    case 2:
        var anim_ledge = spr_lagamorph_ledge
        var anim_climb = spr_ogcat_ledge_climb
        break
    case 3:
        var anim_ledge = spr_ogcat_ledge
        var anim_climb = spr_ogcat_ledge_climb
        break
    }
    
    
    
    if animation[1] &gt;= 4.5{
        if animation[0] != anim_climb
            animation_system_update(anim_ledge,5,0,6)
    }
    if global.key_up{
        if animation[0] != anim_climb{
            animation_system_update(anim_climb,0,0.2,6)
            if animation[4]
                possave[0] = x+49
            else
                possave[0] = x-49
            possave[1] = y   
        }
    }
    if global.key_jump{
        if animation[0] != anim_climb{
            state = 0
            if animation[4]{
                hspeed = -ledgespeedh
                vspeed = -ledgespeedv
            }else{
                hspeed = ledgespeedh
                vspeed = -ledgespeedv            
            }
            
            if animation[4]
                animation[4] = false
            else 
                animation[4] = true
        }
    }
    if animation[0] = anim_climb{
        if animation[4]
            x = possave[0]-(49*cos(degtorad(90*(animation[1]/6))))
        else
            x = possave[0]+(49*cos(degtorad(90*(animation[1]/6))))
        y = possave[1]-(49*sin(degtorad(90*(animation[1]/6))))
        if animation[1] &gt;= 5{
            while(place_meeting(x,y,par_wall))
                y--
            state = 0
        }
    }
    break;
case 2: //fencding stance
    if instance_exists(target){
        animation[4] = target.x &gt; x
        //React to inputs
        if global.key_right{
            hspeed = movespeed
        }
        else if global.key_left{
            hspeed = -movespeed
        }else{
            if abs(hspeed) &lt; 3
                hspeed = 0
            else if (place_meeting(x,y+1,par_wall))
                hspeed -= sign(hspeed)
        }
        
        //Horizontal Collision
        if (place_meeting(x+hspeed,y,par_wall)){
            while(!place_meeting(x+sign(hspeed),y,par_wall)){
                x += sign(hspeed);
            }
            hspeed = 0;
        }
        
        //Vertical Collision
        if (place_meeting(x,y+vspeed,par_wall)){
            while(!place_meeting(x,y+sign(vspeed),par_wall)){
                y += sign(vspeed);
            }
            vspeed = 0;
        }
        
        if global.key_jump and (place_meeting(x,y+1,par_wall)){
            vspeed =  -jumpspeed
            state = 0
        }
        if global.key_lshift
            state = 0
    }else{
        state = 0
    }
}

//Reset the room
if keyboard_check(ord("R")){
    game_restart();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Event Inherited
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quit
if keyboard_check(vk_escape)
    game_end()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Temporary switch skins
if keyboard_check_pressed(ord("3")){
    skin = 2
}
if keyboard_check_pressed(ord("4")){
    skin = 3
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Event Inherited
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ColBox
if keyboard_check(ord('C')){
    draw_set_colour(c_red)
    draw_set_alpha(0.5)
    var spw = sprite_get_width(mask_index)
    var sph = sprite_get_height(mask_index)
    draw_rectangle(x-spw*0.5,y-sph,x+spw*0.5,y,true)
    draw_set_alpha(1)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
